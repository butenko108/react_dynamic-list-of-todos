{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterTypes.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedTodoId","selectedTodoId","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","setQuery","filterType","setFilterType","value","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterTypes","TodoModal","selectedTodo","useState","user","setUser","isLoadingUser","setIsLoadingUser","useEffect","userId","href","email","name","App","setTodos","isLoadingTodos","setIsLoadingTodos","All","useMemo","find","filteredTodos","filter","filteringByTitle","toLowerCase","includes","Active","Completed","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a876bdf.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Maybe } from '../../types/Maybe';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodoId: (id: Maybe<number>) => void;\n  selectedTodoId: Maybe<number>;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodoId,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                { 'has-background-info-light': selectedTodoId === todo.id },\n              )}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={\n                  todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'\n                }\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodoId(todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className={\n                      selectedTodoId === todo.id\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'\n                    }\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FilterTypes } from '../../types/FilterTypes';\n\ntype Props = {\n  query: string;\n  setQuery: (v: string) => void;\n  filterType: FilterTypes;\n  setFilterType: (v: FilterTypes) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  filterType,\n  setFilterType,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={e => setFilterType(e.target.value as FilterTypes)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterTypes {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { Maybe } from '../../types/Maybe';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  setSelectedTodoId: (id: Maybe<number>) => void;\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setSelectedTodoId,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState<Maybe<User>>(null);\n  const [isLoadingUser, setIsLoadingUser] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setUser)\n      .then(() => setIsLoadingUser(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadingUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodoId(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Maybe } from './types/Maybe';\nimport { FilterTypes } from './types/FilterTypes';\nimport { getTodos } from './api';\nimport './app.scss';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoadingTodos, setIsLoadingTodos] = useState(true);\n  const [selectedTodoId, setSelectedTodoId] = useState<Maybe<number>>(null);\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState(FilterTypes.All);\n\n  const selectedTodo = useMemo(() => todos.find(todo => todo.id === selectedTodoId), [selectedTodoId]);\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      const filteringByTitle = title.toLowerCase().includes(query.toLowerCase());\n\n      switch (filterType) {\n        case FilterTypes.All:\n          return filteringByTitle;\n\n        case FilterTypes.Active:\n          return filteringByTitle && !completed;\n\n        case FilterTypes.Completed:\n          return filteringByTitle && completed;\n\n        default:\n          return filteringByTitle;\n      }\n    });\n  }, [query, todos, filterType]);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoadingTodos(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingTodos\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    setSelectedTodoId={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          setSelectedTodoId={setSelectedTodoId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}